{"version":3,"sources":["components/employeetable.js","components/search.js","App.js","randomuserapi.js","serviceWorker.js","index.js"],"names":["EmployeeTable","employees","useState","sortedemployees","updatesortedemployees","useEffect","onClick","updatesort","sort","a","b","namea","name","first","nameb","last","map","thumbnail","picture","email","phone","src","alt","Search","updateemployees","inputvalue","updateinput","searchedemployees","filter","includes","value","onChange","e","target","App","listemployees","updatelistemployees","employeestoRender","updateemployeestoRender","axios","get","then","results","data","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uQAmFeA,EAlFQ,YAAsB,IAAZC,EAAW,EAAXA,UAAW,EACSC,mBAAS,IADlB,mBACjCC,EADiC,KAChBC,EADgB,KAMxC,OAJAC,qBAAU,WACN,OAAOD,EAAsBH,KAE9B,CAACA,IAEA,6BACI,+BACI,+BACI,4BACI,qCACA,wBACIK,QACI,WACI,IACMC,EADa,YAAON,GACOO,MAAK,SAASC,EAAGC,GAC9C,IAAMC,EAAOF,EAAEG,KAAKC,MACdC,EAAOJ,EAAEE,KAAKC,MACpB,OAAIF,EAAQG,GACA,EACDH,EAAQG,EACR,EAEA,KAIfV,EAAsBG,KAhBlC,SAoBA,wBACID,QACI,WACI,IACMC,EADa,YAAON,GACOO,MAAK,SAASC,EAAGC,GAC9C,IAAMC,EAAOF,EAAEG,KAAKG,KACdD,EAAOJ,EAAEE,KAAKG,KACpB,OAAIJ,EAAQG,GACA,EACDH,EAAQG,EACR,EAEA,KAIfV,EAAsBG,KAhBlC,QAoBA,qCACA,uCAGR,+BAEYJ,EAAgBa,KAAI,SAAS,GAK1B,IAJUC,EAIX,EAJEC,QAASD,UAIX,IAHEL,KAAOC,EAGT,EAHSA,MAAOE,EAGhB,EAHgBA,KACdI,EAEF,EAFEA,MACAC,EACF,EADEA,MAEA,OACI,4BACI,4BAAI,yBAAKC,IAAKJ,EAAWK,IAAKL,KAC9B,4BAAKJ,GACL,4BAAKE,GACL,4BAAKI,GACL,4BAAKC,WCvD9BG,EAfD,YAAwC,IAA7BtB,EAA4B,EAA5BA,UAAWuB,EAAiB,EAAjBA,gBAAiB,EACTtB,mBAAS,IADA,mBACrCuB,EADqC,KACzBC,EADyB,KAW7C,OATArB,qBAAW,WACP,IAAMsB,EACa,KAAfF,EACExB,EACAA,EAAU2B,QAAO,SAAS,GACxB,OADuC,EAAdhB,KAAOG,KACpBc,SAASJ,MAE7BD,EAAiBG,KAClB,CAACF,EAAWxB,EAAWuB,IAEtB,2BAAOM,MAAUL,EAAYM,SAAU,SAAAC,GAAC,OAAIN,EAAYM,EAAEC,OAAOH,W,uBCa9DI,MAnBf,WAAgB,IAAD,EAC+BhC,mBAAS,IADxC,mBACNiC,EADM,KACSC,EADT,OAEuClC,mBAAS,IAFhD,mBAENmC,EAFM,KAEaC,EAFb,KAQb,OALAjC,qBAAU,WCRDkC,IAAMC,IAAI,yCDSFC,MAAK,SAAS,GAAkB,IAAXC,EAAU,EAAhBC,KAAMD,QAClCN,EAAoBM,QAEtB,IAEA,yBAAKE,UAAU,OACb,kDADF,uBAGE,kBAAC,EAAD,CAAQ3C,UAAWkC,EAAeX,gBAAkBc,IACpD,6BACA,kBAAC,EAAD,CAAerC,UAAWoC,METZQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2678f066.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nconst EmployeeTable =  function({employees}){\n    const [sortedemployees, updatesortedemployees] = useState([]);\n    useEffect(function(){\n        return updatesortedemployees(employees);\n\n    }, [employees]);\n    return(\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>photo</th>\n                        <th\n                            onClick={\n                                function(){\n                                    const employeescopy = [...employees];\n                                    const updatesort = employeescopy.sort(function(a, b){\n                                        const namea= a.name.first;\n                                        const nameb= b.name.first;\n                                        if (namea < nameb){\n                                            return -1\n                                        } else if (namea > nameb){\n                                            return 1\n                                        }else{\n                                            return 0\n                                        }\n                                        \n                                    });\n                                    updatesortedemployees(updatesort);\n                                }\n                            }\n                        >first</th>\n                        <th\n                            onClick={\n                                function(){\n                                    const employeescopy = [...employees];\n                                    const updatesort = employeescopy.sort(function(a, b){\n                                        const namea= a.name.last;\n                                        const nameb= b.name.last;\n                                        if (namea < nameb){\n                                            return -1\n                                        } else if (namea > nameb){\n                                            return 1\n                                        }else{\n                                            return 0\n                                        }\n                                        \n                                    });\n                                    updatesortedemployees(updatesort);\n                                }\n                            }\n                        >last</th>\n                        <th>phone</th>\n                        <th>email</th>\n                    </tr>\n                </thead>\n                <tbody>\n                        {\n                            sortedemployees.map(function({\n                                picture:{thumbnail},\n                                name: {first, last},\n                                email,\n                                phone\n                            }){\n                                return(\n                                    <tr>\n                                        <td><img src={thumbnail} alt={thumbnail}/></td>\n                                        <td>{first}</td>\n                                        <td>{last}</td>\n                                        <td>{email}</td>\n                                        <td>{phone}</td>\n                        \n                                    </tr>\n                                )\n                            })\n                        }\n                </tbody>\n            </table>\n        </div>\n    )\n\n}\nexport default EmployeeTable;","import React, { useEffect, useState } from 'react';\nconst Search= function ({employees, updateemployees}){\n        const [ inputvalue, updateinput ] = useState(\"\");\n        useEffect (function(){\n            const searchedemployees =\n                inputvalue === \"\"\n                ? employees \n                : employees.filter(function({name: {last}}){\n                    return last.includes(inputvalue);\n                })\n            updateemployees (searchedemployees);\n        }, [inputvalue,employees, updateemployees]);\n        return(\n            <input value  = {inputvalue} onChange={e => updateinput(e.target.value)}/>\n        )\n}\nexport default Search;","import React, { useEffect, useState } from 'react';\nimport EmployeeTable from \"./components/employeetable\";\nimport Search from \"./components/search\";\nimport {getemployees} from \"./randomuserapi\";\n//import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [listemployees, updatelistemployees]= useState([]);\n  const [employeestoRender, updateemployeestoRender]= useState([]);\n  useEffect(function(){\n    getemployees().then(function({data:{results}}){\n      updatelistemployees(results);\n    });\n  },[]);\n  return (\n    <div className=\"App\">\n      <h1>Employee Directory</h1>\n      Search by last name: \n      <Search employees={listemployees} updateemployees= {updateemployeestoRender} />\n      <br />\n      <EmployeeTable employees={employeestoRender} />\n    </div>\n  );\n}\n\nexport default App;\n","import axios from \"axios\";\nexport const getemployees = function(){\n    return axios.get(\"https://randomuser.me/api/?results=30\")\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}